// <auto-generated />
using System;
using BlazorApp1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorApp1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250328141127_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("BlazorApp1.CountryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Area")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "area");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "capital");

                    b.Property<string>("Cca2")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "cca2");

                    b.Property<string>("Currencies")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "currencies");

                    b.Property<bool>("Independent")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "independent");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "languages");

                    b.Property<int>("Population")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "population");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "region");

                    b.Property<string>("Subregion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "subregion");

                    b.Property<string>("Timezones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timezones");

                    b.HasKey("Id");

                    b.ToTable("CountryDetails");
                });

            modelBuilder.Entity("BlazorApp1.CountryDetail", b =>
                {
                    b.OwnsOne("BlazorApp1.FlagInfo", "Flags", b1 =>
                        {
                            b1.Property<Guid>("CountryDetailId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Png")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "png");

                            b1.HasKey("CountryDetailId");

                            b1.ToTable("CountryDetails");

                            b1.HasAnnotation("Relational:JsonPropertyName", "flags");

                            b1.WithOwner()
                                .HasForeignKey("CountryDetailId");
                        });

                    b.OwnsOne("BlazorApp1.MapInfo", "Maps", b1 =>
                        {
                            b1.Property<Guid>("CountryDetailId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("GoogleMaps")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "googleMaps");

                            b1.Property<string>("OpenStreetMaps")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "openStreetMaps");

                            b1.HasKey("CountryDetailId");

                            b1.ToTable("CountryDetails");

                            b1.HasAnnotation("Relational:JsonPropertyName", "maps");

                            b1.WithOwner()
                                .HasForeignKey("CountryDetailId");
                        });

                    b.OwnsOne("BlazorApp1.NameInfo", "Name", b1 =>
                        {
                            b1.Property<Guid>("CountryDetailId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Common")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "common");

                            b1.Property<string>("Official")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "official");

                            b1.HasKey("CountryDetailId");

                            b1.ToTable("CountryDetails");

                            b1.HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.WithOwner()
                                .HasForeignKey("CountryDetailId");
                        });

                    b.Navigation("Flags")
                        .IsRequired();

                    b.Navigation("Maps")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
